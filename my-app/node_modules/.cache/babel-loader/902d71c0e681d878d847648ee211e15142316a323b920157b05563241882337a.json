{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n\n// function AssignmentForm() {\n//   const [tasks, setTasks] = useState([]);\n//   const [users, setUsers] = useState([]);\n//   const [assignments, setAssignments] = useState([]);\n//   const [selectedTask, setSelectedTask] = useState('');\n//   const [selectedUser, setSelectedUser] = useState('');\n//   const [selectedAssignment, setSelectedAssignment] = useState('');\n\n//   useEffect(() => {\n//     fetchTasks();\n//     fetchUsers();\n//     fetchAssignments();\n//   }, []);\n\n//   function fetchTasks() {\n//     fetch('/http://127.0.0.1:5555/tasks')\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Failed to fetch tasks');\n//         }\n//         return response.json();\n//       })\n//       .then(data => {\n//         setTasks(data);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching tasks:', error);\n//       });\n//   };\n\n//   function fetchUsers() {\n//     fetch('/http://127.0.0.1:5555/users')\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Failed to fetch users');\n//         }\n//         return response.json();\n//       })\n//       .then(data => {\n//         setUsers(data);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching users:', error);\n//       });\n//   };\n\n//   function fetchAssignments() {\n//     fetch('/http://127.0.0.1:5555/assignments')\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Failed to fetch assignments');\n//         }\n//         return response.json();\n//       })\n//       .then(data => {\n//         setAssignments(data);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching assignments:', error);\n//       });\n//   };\n\n//   function handleAssignTask(event) {\n//     event.preventDefault();\n//     fetch('/http://127.0.0.1:5555/assignments', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ taskId: selectedTask, userId: selectedUser }),\n//     })\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Failed to assign task');\n//         }\n\n//         fetchAssignments(); \n//       })\n//       .catch(error => {\n//         console.error('Error assigning task:', error);\n//       });\n//   };\n\n//   function handleDeleteAssignment() {\n//     if (!selectedAssignment) {\n//       alert('Please select an assignment to delete.');\n//       return;\n//     }\n\n//     fetch(`/http://127.0.0.1:5555/assignments/${selectedAssignment}`, {\n//       method: 'DELETE',\n//     })\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Failed to delete assignment');\n//         }\n\n//         fetchAssignments(); \n//       })\n//       .catch(error => {\n//         console.error('Error deleting assignment:', error);\n//       });\n//   };\n\n//   return (\n//     <div>\n//       <h2>Assign Task</h2>\n//       <form onSubmit={handleAssignTask}>\n//         <label>\n//           Task:\n//           <select value={selectedTask} onChange={(e) => setSelectedTask(e.target.value)} required>\n//             <option value=\"\">Select Task</option>\n//             {tasks.map(task => (\n//               <option key={task.id} value={task.id}>{task.title}</option>\n//             ))}\n//           </select>\n//         </label>\n//         <label>\n//           User:\n//           <select value={selectedUser} onChange={(e) => setSelectedUser(e.target.value)} required>\n//             <option value=\"\">Select User</option>\n//             {users.map(user => (\n//               <option key={user.id} value={user.id}>{user.name}</option>\n//             ))}\n//           </select>\n//         </label>\n//         <button type=\"submit\">Assign Task</button>\n//       </form>\n\n//       <div>\n//         <h2>Delete Assignment</h2>\n//         <label>\n//           Select Assignment:\n//           <select value={selectedAssignment} onChange={(e) => setSelectedAssignment(e.target.value)} required>\n//             <option value=\"\">Select Assignment</option>\n//             {assignments.map(assignment => (\n//               <option key={assignment.id} value={assignment.id}>\n//                 {`Assignment ID: ${assignment.id} - Task: ${assignment.task.title} - User: ${assignment.user.name}`}\n//               </option>\n//             ))}\n//           </select>\n//         </label>\n//         <button onClick={handleDeleteAssignment}>Delete Assignment</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default AssignmentForm;\ntext;","map":{"version":3,"names":["text"],"sources":["/home/nyole/Downloads/Task-Manager/my-app/src/Components/Assignment.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n\n// function AssignmentForm() {\n//   const [tasks, setTasks] = useState([]);\n//   const [users, setUsers] = useState([]);\n//   const [assignments, setAssignments] = useState([]);\n//   const [selectedTask, setSelectedTask] = useState('');\n//   const [selectedUser, setSelectedUser] = useState('');\n//   const [selectedAssignment, setSelectedAssignment] = useState('');\n\n//   useEffect(() => {\n//     fetchTasks();\n//     fetchUsers();\n//     fetchAssignments();\n//   }, []);\n\n//   function fetchTasks() {\n//     fetch('/http://127.0.0.1:5555/tasks')\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Failed to fetch tasks');\n//         }\n//         return response.json();\n//       })\n//       .then(data => {\n//         setTasks(data);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching tasks:', error);\n//       });\n//   };\n\n//   function fetchUsers() {\n//     fetch('/http://127.0.0.1:5555/users')\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Failed to fetch users');\n//         }\n//         return response.json();\n//       })\n//       .then(data => {\n//         setUsers(data);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching users:', error);\n//       });\n//   };\n\n//   function fetchAssignments() {\n//     fetch('/http://127.0.0.1:5555/assignments')\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Failed to fetch assignments');\n//         }\n//         return response.json();\n//       })\n//       .then(data => {\n//         setAssignments(data);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching assignments:', error);\n//       });\n//   };\n\n//   function handleAssignTask(event) {\n//     event.preventDefault();\n//     fetch('/http://127.0.0.1:5555/assignments', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ taskId: selectedTask, userId: selectedUser }),\n//     })\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Failed to assign task');\n//         }\n        \n//         fetchAssignments(); \n//       })\n//       .catch(error => {\n//         console.error('Error assigning task:', error);\n//       });\n//   };\n\n//   function handleDeleteAssignment() {\n//     if (!selectedAssignment) {\n//       alert('Please select an assignment to delete.');\n//       return;\n//     }\n\n//     fetch(`/http://127.0.0.1:5555/assignments/${selectedAssignment}`, {\n//       method: 'DELETE',\n//     })\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Failed to delete assignment');\n//         }\n        \n//         fetchAssignments(); \n//       })\n//       .catch(error => {\n//         console.error('Error deleting assignment:', error);\n//       });\n//   };\n\n//   return (\n//     <div>\n//       <h2>Assign Task</h2>\n//       <form onSubmit={handleAssignTask}>\n//         <label>\n//           Task:\n//           <select value={selectedTask} onChange={(e) => setSelectedTask(e.target.value)} required>\n//             <option value=\"\">Select Task</option>\n//             {tasks.map(task => (\n//               <option key={task.id} value={task.id}>{task.title}</option>\n//             ))}\n//           </select>\n//         </label>\n//         <label>\n//           User:\n//           <select value={selectedUser} onChange={(e) => setSelectedUser(e.target.value)} required>\n//             <option value=\"\">Select User</option>\n//             {users.map(user => (\n//               <option key={user.id} value={user.id}>{user.name}</option>\n//             ))}\n//           </select>\n//         </label>\n//         <button type=\"submit\">Assign Task</button>\n//       </form>\n\n//       <div>\n//         <h2>Delete Assignment</h2>\n//         <label>\n//           Select Assignment:\n//           <select value={selectedAssignment} onChange={(e) => setSelectedAssignment(e.target.value)} required>\n//             <option value=\"\">Select Assignment</option>\n//             {assignments.map(assignment => (\n//               <option key={assignment.id} value={assignment.id}>\n//                 {`Assignment ID: ${assignment.id} - Task: ${assignment.task.title} - User: ${assignment.user.name}`}\n//               </option>\n//             ))}\n//           </select>\n//         </label>\n//         <button onClick={handleDeleteAssignment}>Delete Assignment</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default AssignmentForm;\ntext"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}