{"ast":null,"code":"var _jsxFileName = \"/home/nyole/Downloads/Task-Manager/my-app/src/Components/TaskList.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import TaskItem from './TaskItem';\n// import Navbar from './Navbar';\n\n// function formatDateToYMD(dateString) {\n//   const date = new Date(dateString);\n//   const year = date.getFullYear();\n//   const month = String(date.getMonth() + 1).padStart(2, '0');\n//   const day = String(date.getDate()).padStart(2, '0');\n//   return `${year}-${month}-${day}`;\n// }\n\n// const TaskList = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [newTask, setNewTask] = useState({ title: '', due_date: '', description: '', user_id: '' });\n//   const [users, setUsers] = useState([]);\n\n//   useEffect(() => {\n//     const fetchTasks = async () => {\n//       setLoading(true);\n//       try {\n//         const response = await fetch('https://task-app-server-07x5.onrender.com/tasks');\n//         if (!response.ok) {\n//           throw new Error('Error fetching tasks');\n//         }\n//         const data = await response.json();\n//         setTasks(data);\n//         setLoading(false);\n//       } catch (error) {\n//         console.error(error);\n//         setLoading(false);\n//       }\n//     };\n\n//     const fetchUsers = async () => {\n//       try {\n//         const response = await fetch('https://task-app-server-07x5.onrender.com/users');\n//         if (!response.ok) {\n//           throw new Error('Error fetching users');\n//         }\n//         const data = await response.json();\n//         setUsers(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchTasks();\n//     fetchUsers();\n//   }, []);\n\n//   const handleDeleteTask = async (id) => {\n//     try {\n//       const response = await fetch(`https://task-app-server-07x5.onrender.com/tasks/${id}`, {\n//         method: 'DELETE',\n//       });\n//       if (!response.ok) {\n//         throw new Error('Error deleting task');\n//       }\n//       setTasks(tasks.filter(task => task.id !== id));\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleCreateTask = async (e) => {\n//     console.log(JSON.stringify(newTask))\n//     e.preventDefault();\n//     try {\n//       const response = await fetch('https://task-app-server-07x5.onrender.com/tasks', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(newTask),\n//       });\n//       if (!response.ok) {\n//         throw new Error('Failed to create task: Server responded with ' + response.status);\n//       }\n//       const data = await response.json();\n//       setTasks([...tasks, data]);\n//       setNewTask({ title: '', due_date: '', description: '', user_id: '' });\n//     } catch (error) {\n//       console.error('Error creating task:', error);\n//     }\n//   };\n\n//   const filteredTasks = tasks.filter(task =>\n//     task.title.toLowerCase().includes(searchTerm.toLowerCase())\n//   );\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <h2 className='task-list'>Tasks List</h2>\n\n//       <input \n//         type=\"text\" \n//         placeholder=\"Search tasks...\" \n//         value={searchTerm} \n//         onChange={(e) => setSearchTerm(e.target.value)} \n//       />\n\n//       <form onSubmit={handleCreateTask}>\n//         <input \n//           type=\"text\" \n//           placeholder=\"Title\" \n//           value={newTask.title} \n//           onChange={(e) => setNewTask({ ...newTask, title: e.target.value })} \n//           required \n//         />\n//         <input \n//           type=\"date\" \n//           placeholder=\"Due Date\" \n//           value={newTask.due_date} \n//           onChange={(e) => {\n//             const formattedDate = formatDateToYMD(e.target.value);\n//             setNewTask({ ...newTask, due_date: formattedDate });\n//           }}  \n//           required \n//         />\n//         <textarea \n//           placeholder=\"Description\" \n//           value={newTask.description} \n//           onChange={(e) => setNewTask({ ...newTask, description: e.target.value })} \n//           required \n//         />\n//         <select\n//           value={newTask.user_id}\n//           onChange={(e) => setNewTask({ ...newTask, user_id: e.target.value })}\n//           required\n//         >\n//           <option value=\"\">Select User</option>\n//           {users.map(user => (\n//             <option key={user.id} value={user.id}>\n//               {user.name}\n//             </option>\n//           ))}\n//         </select>\n//         <button type=\"submit\">Add Task</button>\n//       </form>\n\n//       {loading ? (\n//         <p>Loading...</p>\n//       ) : (\n//         <ul>\n//           {filteredTasks.map(task => (\n//             <TaskItem key={task.id} task={task} onDelete={() => handleDeleteTask(task.id)} />\n//           ))}\n//         </ul>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default TaskList;\nimport React, { useState, useEffect } from 'react';\nimport TaskItem from './TaskItem';\nimport Navbar from './Navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction formatDateToYMD(dateString) {\n  const date = new Date(dateString);\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [newTask, setNewTask] = useState({\n    title: '',\n    due_date: '',\n    description: '',\n    user_id: ''\n  });\n  const [users, setUsers] = useState([]);\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [assignments, setAssignments] = useState([]);\n  useEffect(() => {\n    const fetchTasks = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch('https://task-app-server-07x5.onrender.com/tasks');\n        if (!response.ok) {\n          throw new Error('Error fetching tasks');\n        }\n        const data = await response.json();\n        setTasks(data);\n        setLoading(false);\n      } catch (error) {\n        console.error(error);\n        setLoading(false);\n      }\n    };\n    const fetchUsers = async () => {\n      try {\n        const response = await fetch('https://task-app-server-07x5.onrender.com/users');\n        if (!response.ok) {\n          throw new Error('Error fetching users');\n        }\n        const data = await response.json();\n        setUsers(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchTasks();\n    fetchUsers();\n  }, []);\n  const handleDeleteTask = async id => {\n    try {\n      const response = await fetch(`https://task-app-server-07x5.onrender.com/tasks/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Error deleting task');\n      }\n      setTasks(tasks.filter(task => task.id !== id));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleCreateTask = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('https://task-app-server-07x5.onrender.com/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTask)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create task: Server responded with ' + response.status);\n      }\n      const data = await response.json();\n      setTasks([...tasks, data]);\n      setNewTask({\n        title: '',\n        due_date: '',\n        description: '',\n        user_id: ''\n      });\n    } catch (error) {\n      console.error('Error creating task:', error);\n    }\n  };\n  const handleShowAssignments = async taskId => {\n    setSelectedTask(taskId);\n    try {\n      const response = await fetch(`https://task-app-server-07x5.onrender.com/tasks/${taskId}/assignments`);\n      if (!response.ok) {\n        throw new Error('Error fetching assignments');\n      }\n      const data = await response.json();\n      setAssignments(data);\n    } catch (error) {\n      console.error('Error fetching assignments:', error);\n    }\n  };\n  const filteredTasks = tasks.filter(task => task.title.toLowerCase().includes(searchTerm.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"task-list\",\n      children: \"Tasks List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search tasks...\",\n      value: searchTerm,\n      onChange: e => setSearchTerm(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCreateTask,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        value: newTask.title,\n        onChange: e => setNewTask({\n          ...newTask,\n          title: e.target.value\n        }),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        placeholder: \"Due Date\",\n        value: newTask.due_date,\n        onChange: e => {\n          const formattedDate = formatDateToYMD(e.target.value);\n          setNewTask({\n            ...newTask,\n            due_date: formattedDate\n          });\n        },\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Description\",\n        value: newTask.description,\n        onChange: e => setNewTask({\n          ...newTask,\n          description: e.target.value\n        }),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: newTask.user_id,\n        onChange: e => setNewTask({\n          ...newTask,\n          user_id: e.target.value\n        }),\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }, this), users.map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: user.id,\n          children: user.name\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredTasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(TaskItem, {\n          task: task,\n          onDelete: () => handleDeleteTask(task.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleShowAssignments(task.id),\n          children: \"Show Assignments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 17\n        }, this), selectedTask === task.id && /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: assignments.map(assignment => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [assignment.status, \": \", assignment.description]\n          }, assignment.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 23\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 19\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"wy67XKRo6Wv72dGvvfw8nHTvrzo=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","useEffect","TaskItem","Navbar","jsxDEV","_jsxDEV","formatDateToYMD","dateString","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","TaskList","_s","tasks","setTasks","loading","setLoading","searchTerm","setSearchTerm","newTask","setNewTask","title","due_date","description","user_id","users","setUsers","selectedTask","setSelectedTask","assignments","setAssignments","fetchTasks","response","fetch","ok","Error","data","json","error","console","fetchUsers","handleDeleteTask","id","method","filter","task","handleCreateTask","e","preventDefault","headers","body","JSON","stringify","status","handleShowAssignments","taskId","filteredTasks","toLowerCase","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","value","onChange","target","onSubmit","required","formattedDate","map","user","name","onDelete","onClick","assignment","_c","$RefreshReg$"],"sources":["/home/nyole/Downloads/Task-Manager/my-app/src/Components/TaskList.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import TaskItem from './TaskItem';\n// import Navbar from './Navbar';\n\n// function formatDateToYMD(dateString) {\n//   const date = new Date(dateString);\n//   const year = date.getFullYear();\n//   const month = String(date.getMonth() + 1).padStart(2, '0');\n//   const day = String(date.getDate()).padStart(2, '0');\n//   return `${year}-${month}-${day}`;\n// }\n\n// const TaskList = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [newTask, setNewTask] = useState({ title: '', due_date: '', description: '', user_id: '' });\n//   const [users, setUsers] = useState([]);\n\n//   useEffect(() => {\n//     const fetchTasks = async () => {\n//       setLoading(true);\n//       try {\n//         const response = await fetch('https://task-app-server-07x5.onrender.com/tasks');\n//         if (!response.ok) {\n//           throw new Error('Error fetching tasks');\n//         }\n//         const data = await response.json();\n//         setTasks(data);\n//         setLoading(false);\n//       } catch (error) {\n//         console.error(error);\n//         setLoading(false);\n//       }\n//     };\n\n//     const fetchUsers = async () => {\n//       try {\n//         const response = await fetch('https://task-app-server-07x5.onrender.com/users');\n//         if (!response.ok) {\n//           throw new Error('Error fetching users');\n//         }\n//         const data = await response.json();\n//         setUsers(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchTasks();\n//     fetchUsers();\n//   }, []);\n\n//   const handleDeleteTask = async (id) => {\n//     try {\n//       const response = await fetch(`https://task-app-server-07x5.onrender.com/tasks/${id}`, {\n//         method: 'DELETE',\n//       });\n//       if (!response.ok) {\n//         throw new Error('Error deleting task');\n//       }\n//       setTasks(tasks.filter(task => task.id !== id));\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleCreateTask = async (e) => {\n//     console.log(JSON.stringify(newTask))\n//     e.preventDefault();\n//     try {\n//       const response = await fetch('https://task-app-server-07x5.onrender.com/tasks', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(newTask),\n//       });\n//       if (!response.ok) {\n//         throw new Error('Failed to create task: Server responded with ' + response.status);\n//       }\n//       const data = await response.json();\n//       setTasks([...tasks, data]);\n//       setNewTask({ title: '', due_date: '', description: '', user_id: '' });\n//     } catch (error) {\n//       console.error('Error creating task:', error);\n//     }\n//   };\n\n//   const filteredTasks = tasks.filter(task =>\n//     task.title.toLowerCase().includes(searchTerm.toLowerCase())\n//   );\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <h2 className='task-list'>Tasks List</h2>\n      \n//       <input \n//         type=\"text\" \n//         placeholder=\"Search tasks...\" \n//         value={searchTerm} \n//         onChange={(e) => setSearchTerm(e.target.value)} \n//       />\n\n//       <form onSubmit={handleCreateTask}>\n//         <input \n//           type=\"text\" \n//           placeholder=\"Title\" \n//           value={newTask.title} \n//           onChange={(e) => setNewTask({ ...newTask, title: e.target.value })} \n//           required \n//         />\n//         <input \n//           type=\"date\" \n//           placeholder=\"Due Date\" \n//           value={newTask.due_date} \n//           onChange={(e) => {\n//             const formattedDate = formatDateToYMD(e.target.value);\n//             setNewTask({ ...newTask, due_date: formattedDate });\n//           }}  \n//           required \n//         />\n//         <textarea \n//           placeholder=\"Description\" \n//           value={newTask.description} \n//           onChange={(e) => setNewTask({ ...newTask, description: e.target.value })} \n//           required \n//         />\n//         <select\n//           value={newTask.user_id}\n//           onChange={(e) => setNewTask({ ...newTask, user_id: e.target.value })}\n//           required\n//         >\n//           <option value=\"\">Select User</option>\n//           {users.map(user => (\n//             <option key={user.id} value={user.id}>\n//               {user.name}\n//             </option>\n//           ))}\n//         </select>\n//         <button type=\"submit\">Add Task</button>\n//       </form>\n\n//       {loading ? (\n//         <p>Loading...</p>\n//       ) : (\n//         <ul>\n//           {filteredTasks.map(task => (\n//             <TaskItem key={task.id} task={task} onDelete={() => handleDeleteTask(task.id)} />\n//           ))}\n//         </ul>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default TaskList;\nimport React, { useState, useEffect } from 'react';\nimport TaskItem from './TaskItem';\nimport Navbar from './Navbar';\n\nfunction formatDateToYMD(dateString) {\n  const date = new Date(dateString);\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\nconst TaskList = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [newTask, setNewTask] = useState({ title: '', due_date: '', description: '', user_id: '' });\n  const [users, setUsers] = useState([]);\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [assignments, setAssignments] = useState([]);\n\n  useEffect(() => {\n    const fetchTasks = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch('https://task-app-server-07x5.onrender.com/tasks');\n        if (!response.ok) {\n          throw new Error('Error fetching tasks');\n        }\n        const data = await response.json();\n        setTasks(data);\n        setLoading(false);\n      } catch (error) {\n        console.error(error);\n        setLoading(false);\n      }\n    };\n\n    const fetchUsers = async () => {\n      try {\n        const response = await fetch('https://task-app-server-07x5.onrender.com/users');\n        if (!response.ok) {\n          throw new Error('Error fetching users');\n        }\n        const data = await response.json();\n        setUsers(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchTasks();\n    fetchUsers();\n  }, []);\n\n  const handleDeleteTask = async (id) => {\n    try {\n      const response = await fetch(`https://task-app-server-07x5.onrender.com/tasks/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        throw new Error('Error deleting task');\n      }\n      setTasks(tasks.filter(task => task.id !== id));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleCreateTask = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch('https://task-app-server-07x5.onrender.com/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(newTask),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create task: Server responded with ' + response.status);\n      }\n      const data = await response.json();\n      setTasks([...tasks, data]);\n      setNewTask({ title: '', due_date: '', description: '', user_id: '' });\n    } catch (error) {\n      console.error('Error creating task:', error);\n    }\n  };\n\n  const handleShowAssignments = async (taskId) => {\n    setSelectedTask(taskId);\n    try {\n      const response = await fetch(`https://task-app-server-07x5.onrender.com/tasks/${taskId}/assignments`);\n      if (!response.ok) {\n        throw new Error('Error fetching assignments');\n      }\n      const data = await response.json();\n      setAssignments(data);\n    } catch (error) {\n      console.error('Error fetching assignments:', error);\n    }\n  };\n\n  const filteredTasks = tasks.filter(task =>\n    task.title.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div>\n      <Navbar />\n      <h2 className='task-list'>Tasks List</h2>\n      \n      <input \n        type=\"text\" \n        placeholder=\"Search tasks...\" \n        value={searchTerm} \n        onChange={(e) => setSearchTerm(e.target.value)} \n      />\n\n      <form onSubmit={handleCreateTask}>\n        <input \n          type=\"text\" \n          placeholder=\"Title\" \n          value={newTask.title} \n          onChange={(e) => setNewTask({ ...newTask, title: e.target.value })} \n          required \n        />\n        <input \n          type=\"date\" \n          placeholder=\"Due Date\" \n          value={newTask.due_date} \n          onChange={(e) => {\n            const formattedDate = formatDateToYMD(e.target.value);\n            setNewTask({ ...newTask, due_date: formattedDate });\n          }}  \n          required \n        />\n        <textarea \n          placeholder=\"Description\" \n          value={newTask.description} \n          onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}\n          required \n          />\n          <select\n            value={newTask.user_id}\n            onChange={(e) => setNewTask({ ...newTask, user_id: e.target.value })}\n            required\n          >\n            <option value=\"\">Select User</option>\n            {users.map(user => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n          <button type=\"submit\">Add Task</button>\n        </form>\n  \n        {loading ? (\n          <p>Loading...</p>\n        ) : (\n          <ul>\n            {filteredTasks.map(task => (\n              <li key={task.id}>\n                <TaskItem task={task} onDelete={() => handleDeleteTask(task.id)} />\n                <button onClick={() => handleShowAssignments(task.id)}>Show Assignments</button>\n                {selectedTask === task.id && (\n                  <ul>\n                    {assignments.map(assignment => (\n                      <li key={assignment.id}>\n                        {assignment.status}: {assignment.description}\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    );\n  };\n  \n  export default TaskList;\n  "],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,eAAeA,CAACC,UAAU,EAAE;EACnC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,MAAMG,IAAI,GAAGF,IAAI,CAACG,WAAW,CAAC,CAAC;EAC/B,MAAMC,KAAK,GAAGC,MAAM,CAACL,IAAI,CAACM,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC1D,MAAMC,GAAG,GAAGH,MAAM,CAACL,IAAI,CAACS,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}